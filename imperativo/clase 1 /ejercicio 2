2.- El administrador de un edificio de oficinas cuenta, en papel, con la información del pago de
las expensas de dichas oficinas.
Implementar un programa que invoque a módulos para cada uno de los siguientes puntos:
a. Genere un vector, sin orden, con a lo sumo las 300 oficinas que administra. De cada oficina
se ingresa el código de identificación, DNI del propietario y valor de la expensa. La lectura
finaliza cuando se ingresa el código de identificación -1, el cual no se procesa.
b. Ordene el vector, aplicando el método de inserción, por código de identificación de la
oficina.
c. Ordene el vector aplicando el método de selección, por código de identificación de la oficina.

a) b) c)
program ejercicio_2;
const 
  dimf = 300;
type
  rango = 1..dimf;
  oficina = record 
    cod_identificacion: integer;
    dni: integer; 
	valor: real;
  end;
  vector = array [rango] of oficina;
procedure leerdatos (var o:oficina);
  begin 
    writeln('ingrese el codigo de identificacion');
    readln(o.cod_identificacion);
    if(o.cod_identificacion <> -1)then begin 
      writeln('ingrese el dni del propietario');
      readln(o.dni);
      writeln('ingrese el valor de la expensa');
      readln(o.valor); 
    end;
  end;
procedure cargarvector(var v:vector; var diml:integer);
  var 
    o:oficina;
  begin 
    leerdatos(o);
    while (diml <> dimf) and (o.cod_identificacion <> -1)do begin 
      diml:= diml + 1;
      v[diml]:= o;
      leerdatos(o);
    end;
  end; 
procedure seleccion (var v:vector; diml: integer);
  var 
    i,j:integer;
    actual: oficina;
    pos: rango;
  begin 
    for i := 1 to diml do begin 
      pos := i;
      for j := i+1 to diml do begin 
        if(v[j].cod_identificacion < v[pos].cod_identificacion)then begin 
          pos := j;
        end;
      end;
      actual := v[pos];
      v[pos] := v[i];
      v[i] := actual;
    end;
  end;
{  
procedure insercion(var v:vector; diml:integer );
  var i,j: integer; 
    actual: oficina;
  begin 
    for i:= 2 to diml do begin 
      actual:= v[i];
      j:= i - 1; 
      while ((j > 0) and (v[j].cod_identificacion > actual.cod_identificacion)) do 
        begin
          v[j + 1]:=  v[j];
          j:= j - 1;                  
        end;  
      v[j + 1]:= actual; 
    end;
  end;}
procedure recorrovector(v:vector; diml:integer);
  var 
    i:rango;
  begin 
    for i := 1 to diml do begin 
      writeln('el valor en la posicion: ',i,' es ',v[i].cod_identificacion);
    end;
  end;
var 
  v: vector;
  diml: integer;
begin  
  diml:= 0;
  cargarVector(v,diml);
  {insercion(v,diml);}
  seleccion(v,diml);
  recorrovector (v,diml);
end.

