2. Una agencia dedicada a la venta de autos ha organizado su stock y, tiene la información de
los autos en venta. Implementar un programa que:
a) Genere la información de los autos (patente, año de fabricación (2010..2018), marca y
modelo, finalizando con marca ‘MMM’) y los almacene en dos estructuras de datos:
i. Una estructura eficiente para la búsqueda por patente.
ii. Una estructura eficiente para la búsqueda por marca. Para cada marca se deben
almacenar todos juntos los autos pertenecientes a ella.
b) Invoque a un módulo que reciba la estructura generado en a) i y una marca y retorne la
cantidad de autos de dicha marca que posee la agencia.
c) Invoque a un módulo que reciba la estructura generado en a) ii y una marca y retorne
la cantidad de autos de dicha marca que posee la agencia.
d) Invoque a un módulo que reciba el árbol generado en a) i y retorne una estructura con
la información de los autos agrupados por año de fabricación.
e) Invoque a un módulo que reciba el árbol generado en a) i y una patente y devuelva el
modelo del auto con dicha patente.
f) Invoque a un módulo que reciba el árbol generado en a) ii y una patente y devuelva el
modelo del auto con dicha patente.



program ejercicio_2;
const
  dimf = 2018;
type 
  rango = 2010..dimf;
  
  auto =  record 
    patente: integer;
    fabricacion: integer;
    marca: string;
    modelo: string;
  end;
  
  arbol1 =^ nodo;
    nodo = record 
      dato: auto;
      hi: arbol1;
      hd: arbol1;
    end;
    
  lista =^nodolista;
    nodolista = record
      dato: auto;
      sig: lista;
    end;
    
  arbol2 =^nodo2;
    nodo2 = record
      dato: lista;
      hi: arbol2;
      hd: arbol2;
    end;
  
  lista2 = ^nodolista2;
    nodolista2 = record
      dato : auto;
      sig : lista2;
    end;
  
  vector = array [rango] of lista2;

procedure ingresar_datos(var a: auto);
  begin 
    writeln('ingrese la marca');
    readln(a.marca);
    if(a.marca <> 'mmm')then begin 
      writeln('ingrese la patente ');
      readln(a.patente);
      writeln('ingrese el ano de fabricacion');
      readln(a.fabricacion);
      writeln('ingrese el modelo del auto');
      readln(a.modelo);
      writeln('');
    end;
  end;
procedure cargo_arbol (var a1: arbol1; a: auto);
  begin 
    if(a1 = nil)then begin
      new (a1);
      a1^.dato := a;
      a1^.hi := nil;
      a1^.hd := nil;
    end
    else begin 
      if(a1^.dato.patente > a.patente)then begin 
        cargo_arbol(a1^.hi,a);
      end
      else begin 
        cargo_arbol(a1^.hd,a)
      end;
    end;
  end;
procedure agregaradelante(var l: lista;a : auto);
  var
    aux: lista;
  begin 
    new(aux);
    aux^.dato := a;
    aux^.sig := l; 
    l := aux;
  end;
procedure cargo_arbol2 (var a2: arbol2; a: auto);
  begin 
    if (a2 = nil)then begin 
      new(a2);
      a2^.dato := nil;
      agregaradelante (a2^.dato,a);
      a2^.hi := nil;
      a2^.hd := nil;
    end
    else begin 
      if(a2^.dato^.dato.marca = a.marca)then begin 
        agregaradelante(a2^.dato,a);
      end
      else begin
        if(a2^.dato^.dato.marca > a.marca)then begin 
          cargo_arbol2(a2^.hi,a);
        end
        else begin 
          cargo_arbol2(a2^.hd,a);
        end;
      end;
    end;
  end;
procedure cargar_arboles(var a1:arbol1;var a2:arbol2);
  var 
    a: auto;
  begin 
    ingresar_datos(a);
    while (a.marca <> 'mmm')do begin 
      cargo_arbol(a1,a);
      cargo_arbol2(a2,a);
      ingresar_datos(a);
    end;
  end;
function inspecciono_marca (a1 : arbol1; elegida: string): integer;
  begin 
    if(a1 <> nil)then begin 
      if(a1^.dato.marca = elegida)then begin 
        inspecciono_marca := inspecciono_marca(a1^.hi,elegida) + inspecciono_marca(a1^.hd,elegida) + 1;
      end
      else begin 
        inspecciono_marca := inspecciono_marca(a1^.hi,elegida); 
        inspecciono_marca := inspecciono_marca(a1^.hd,elegida);
      end;
    end
    else begin 
      inspecciono_marca := 0;
    end;
  end;
procedure recorrerlista(l:lista;var cant:integer);
  begin 
    while (l <> nil)do begin 
      cant := cant + 1;
      l:= l^.sig;
    end;
  end;
procedure inspecciono_marca_ii (a2: arbol2; elegida: string; var cant: integer);
  begin 
    if (a2 <> nil)then begin 
      if(elegida = a2^.dato^.dato.marca)then begin 
        recorrerlista(a2^.dato,cant);
      end
      else begin 
        if(elegida < a2^.dato^.dato.marca)then begin
          inspecciono_marca_ii(a2^.hi,elegida,cant);
        end
        else begin 
          inspecciono_marca_ii(a2^.hd,elegida,cant);
        end;
      end;
    end;
  end;
procedure inicializo_vector_listas (var v:vector);
  var 
    i : rango;
  begin 
    for i := 2010 to dimf do begin 
      v[i] := nil;
    end;
  end;  

procedure agregaradelante_lista2 (var l2: lista2; a: auto);
  var 
    aux: lista2;
  begin 
    new(aux);
    aux^.dato := a;
    aux^.sig := l2;
    l2 := aux;
  end;

procedure agrupados (a1 : arbol1; var v: vector);
  begin 
    if (a1 <> nil)then begin   
      agrupados(a1^.hd,v);
      agrupados(a1^.hi,v);
      agregaradelante_lista2(v[a1^.dato.fabricacion],a1^.dato);
    end;
  end;
procedure buscar_patente (a1: arbol1; pat_ele: integer; var modelo_auto: string);
  begin 
    if(a1 <> nil)then begin 
      if(a1^.dato.patente = pat_ele)then begin
        modelo_auto := a1^.dato.modelo;
      end
      else begin
        buscar_patente(a1^.hi,pat_ele,modelo_auto);
        buscar_patente(a1^.hd,pat_ele,modelo_auto);
      end;
    end;
  end; 
procedure busco_en_lista(l: lista; pat_ele: integer; var modelo_auto_ii: string);
  begin 
    while (l <> nil)do begin 
      if (l^.dato.patente = pat_ele)then begin 
        modelo_auto_ii := l^.dato.modelo;
      end;
      l := l^.sig;
    end;
  end; 
procedure buscar_patente_ii(a2 :arbol2; pat_ele: integer; var modelo_auto_ii: string);
  begin 
    if(a2 <> nil)then begin 
      busco_en_lista(a2^.dato,pat_ele,modelo_auto_ii);
      buscar_patente_ii(a2^.hi,pat_ele,modelo_auto_ii);
      buscar_patente_ii(a2^.hd,pat_ele,modelo_auto_ii);
    end;
  end;

procedure recorrer_lista2(l2 : lista2);
  begin 
    while (l2 <> nil)do begin 
      writeln('  ',l2^.dato.marca,' ',l2^.dato.modelo);
      l2:= l2^.sig;
    end;
  end;
procedure recorrer_agrupados(v: vector);
  var 
    i: rango;
  begin 
    for i := 2010 to dimf do begin
      if(v[i] <> nil)then begin 
        writeln('los fabricados en el ano: ',i);
        recorrer_lista2(v[i]);
        writeln('');
      end;
    end;
  end;

procedure ingrese_marca (var elegida: string);
  begin 
    writeln('');
    writeln('ingrese una marca de auto');
    readln(elegida);
    writeln('');
  end;
procedure imprimo_marca_ii (elegida: string; cant: integer);
  begin 
    if (cant <> 0)then begin 
      writeln('la cantidad de autos que hay de la marca ',elegida,' es: ',cant);
    end
    else begin
     writeln('la marca elegida ',elegida,' no fue ingresada ');
    end;
  end;
  
var 
  a1: arbol1;
  a2: arbol2;
  v: vector;
  elegida: string;
  pat_ele: integer;
  modelo_auto: string;
  modelo_auto_ii: string;
  cant: integer;
begin 
  a1 := nil;
  a2 := nil;
  cant := 0;
  inicializo_vector_listas(v);
  modelo_auto := 'mmm';
  cargar_arboles(a1,a2);
  ingrese_marca(elegida);
  writeln('la cantidad de autos que hay de la marca ',elegida,' es: ',inspecciono_marca(a1,elegida));
  writeln('');
  inspecciono_marca_ii(a2,elegida,cant);
  imprimo_marca_ii(elegida,cant);
  agrupados(a1,v);
  recorrer_agrupados(v);
  writeln('ingrese una patente: ');
  readln(pat_ele);
  buscar_patente(a1,pat_ele,modelo_auto);
  writeln('');
  if(modelo_auto = 'mmm')then begin 
    writeln('la patente ingresada no se encuentra');
  end
  else begin 
    writeln('el modelo del auto con patente ',pat_ele,' es: ',modelo_auto);
    buscar_patente_ii(a2,pat_ele,modelo_auto_ii);
    writeln('');
    writeln('el modelo del auto con patente ',pat_ele,' es: ',modelo_auto_ii);
  end;
end.
